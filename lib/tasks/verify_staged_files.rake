# frozen_string_literal: true

require 'json'

desc 'Recursively verify submission files in json/staged_json'
task verify_staged_files: [:environment] do
  staging_verifier = StagingVerifier.new
  staging_verifier.execute
end

class StagingVerifier
  FILENAME_EXTRACTOR_REGEX = %r{.*/(?<filename>.*\.json)}.freeze

  def initialize
    @errors = []
    @valid_files = []
    @successful_moves = []
  end

  def execute
    filepaths = load_json_files_from_staging_directory

    filepaths.each do |filepath|
      verify_json_contents(filepath)
    end

    move_valid_files if @valid_files.any?

    report_results
  end

  private

  def load_json_files_from_staging_directory
    Dir.glob('json/staged_json/**/*').filter_map { |path| File.expand_path(path) if File.file?(path) }
  end

  def load_file(filepath)
    file = File.read(filepath)
    JSON.parse(file)
  end

  def verify_json_contents(filepath)
    contents = load_file(filepath)

    submission = Submission::SubmissionPackage.new(
      action: 'create_download',
      project_as_hash: {
        department: contents['department']&.downcase,
        video_link: contents['video_link'],
        title: contents['title'],
        abstract: contents['abstract'],
        year: contents['year']
      },
      people_as_array: contents['group_members']
    )

    raise ActiveRecord::RecordInvalid, submission.error_messages_as_string unless submission.valid_submission?

    @valid_files.append(filepath)
  rescue JSON::ParserError
    @errors.append({ filepath: filepath, message: 'Invalid json file.' })
  rescue ActiveRecord::RecordInvalid => e
    @errors.append({ filepath: filepath, message: e })
  rescue StandardError => e
    @errors.append({ filepath: filepath, message: "Unknown error with file. Message: #{e}" })
  end

  def move_valid_files
    folder_name = SecureRandom.uuid

    begin
      Dir.mkdir("json/autogenerated_staged/#{folder_name}")
    rescue StandardError => e
      puts "Something went wrong with directory creation in json/autogenerated_stage. Error: #{e}"
      return
    end

    @valid_files.each do |file|
      match = file.match(FILENAME_EXTRACTOR_REGEX)
      raise NameError, 'Filepath failed to allow a valid filename extraction.' unless match

      filename = match['filename']
      target = "json/autogenerated_staged/#{folder_name}/#{filename}"

      raise NameError, 'File name is a duplicate.' if File.exist?(target)

      File.rename file, target
      @successful_moves.append(file)
    rescue StandardError => e
      puts "Something went wrong moving #{file}."
      @errors.append({ filepath: file, message: "Moving Error. #{e}" })
    end
  end

  def report_results
    puts "\n*********************\nResults Report: \n*********************\n"

    if @successful_moves.any?
      puts "\n#{@successful_moves.count} file(s) successfully validated and moved:\n*********************\n"
    end

    puts "\n#{@errors.count} files experianced errors:\n*********************\n" if @errors.any?
    @errors.each do |error|
      puts "#{error[:filepath]}: #{error[:message]}"
    end

    puts "\nNothing to do.\n" if @errors.empty? && @successful_moves.empty?

    puts "\n*********************\n"
  end
end
